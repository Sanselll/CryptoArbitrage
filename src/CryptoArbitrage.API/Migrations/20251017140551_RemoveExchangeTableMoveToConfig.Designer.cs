// <auto-generated />
using System;
using CryptoArbitrage.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoArbitrage.API.Migrations
{
    [DbContext(typeof(ArbitrageDbContext))]
    [Migration("20251017140551_RemoveExchangeTableMoveToConfig")]
    partial class RemoveExchangeTableMoveToConfig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("CryptoArbitrage.API.Data.Entities.Execution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundingEarned")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<string>("PerpOrderId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PositionSizeUsd")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<string>("SpotOrderId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StoppedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("State", "StartedAt");

                    b.HasIndex("Symbol", "Exchange");

                    b.ToTable("Executions");
                });

            modelBuilder.Entity("CryptoArbitrage.API.Data.Entities.FundingRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AnnualizedRate")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FundingTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextFundingTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Exchange", "Symbol", "RecordedAt");

                    b.ToTable("FundingRates");
                });

            modelBuilder.Entity("CryptoArbitrage.API.Data.Entities.PerformanceMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AccountBalance")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LargestLoss")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LargestWin")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<int>("LosingTrades")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxDrawdown")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetFundingFee")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RealizedPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalFundingFeePaid")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalFundingFeeReceived")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnrealizedPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WinRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("WinningTrades")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("PerformanceMetrics");
                });

            modelBuilder.Entity("CryptoArbitrage.API.Data.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EntryPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExecutionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ExitPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InitialMargin")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Leverage")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RealizedPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<int>("Side")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalFundingFeePaid")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalFundingFeeReceived")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnrealizedPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionId", "Type");

                    b.HasIndex("Status", "OpenedAt");

                    b.HasIndex("Symbol", "Exchange");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("CryptoArbitrage.API.Data.Entities.Position", b =>
                {
                    b.HasOne("CryptoArbitrage.API.Data.Entities.Execution", "Execution")
                        .WithMany()
                        .HasForeignKey("ExecutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Execution");
                });
#pragma warning restore 612, 618
        }
    }
}

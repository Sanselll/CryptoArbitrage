name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Pull LFS files
        run: |
          git lfs pull
          git lfs ls-files

      - name: Free up disk space
        run: |
          echo "Disk space before cleanup:"
          df -h
          # Remove unnecessary software
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune -af
          sudo docker system prune -af
          echo "Disk space after cleanup:"
          df -h

      - name: Set lowercase owner
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify LFS files
        run: |
          echo "Checking LFS files..."
          ls -lh ml_pipeline/models/xgboost/*.pkl
          echo "Total size of models:"
          du -sh ml_pipeline/models/

      - name: Build and push ML API image
        uses: docker/build-push-action@v5
        with:
          context: ./ml_pipeline
          file: ./ml_pipeline/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LOWER }}/crypto-arbitrage/ml-api:latest
            ghcr.io/${{ env.OWNER_LOWER }}/crypto-arbitrage/ml-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/CryptoArbitrage.API/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LOWER }}/crypto-arbitrage/api:latest
            ghcr.io/${{ env.OWNER_LOWER }}/crypto-arbitrage/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LOWER }}/crypto-arbitrage/web:latest
            ghcr.io/${{ env.OWNER_LOWER }}/crypto-arbitrage/web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_GOOGLE_CLIENT_ID=${{ secrets.PROD_GOOGLE_CLIENT_ID }}
            VITE_API_BASE_URL_DEMO=http://${{ secrets.PROD_DOMAIN }}:8081/api
            VITE_API_BASE_URL_REAL=http://${{ secrets.PROD_DOMAIN }}:8080/api

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY_BASE64 }}" | base64 -d > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

      - name: Deploy to DigitalOcean
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_SHA: ${{ github.sha }}
          PROD_POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}
          PROD_JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
          PROD_ENCRYPTION_KEY: ${{ secrets.PROD_ENCRYPTION_KEY }}
          PROD_GOOGLE_CLIENT_ID: ${{ secrets.PROD_GOOGLE_CLIENT_ID }}
          PROD_GOOGLE_CLIENT_SECRET: ${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}
          PROD_DOMAIN: ${{ secrets.PROD_DOMAIN }}
        run: |
          # Copy deploy script to droplet
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ./deploy.sh $DEPLOY_USER@$DEPLOY_HOST:/tmp/deploy.sh

          # Execute deploy script
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST \
            GITHUB_REPOSITORY="$GITHUB_REPOSITORY" \
            GITHUB_SERVER_URL="$GITHUB_SERVER_URL" \
            GITHUB_SHA="$GITHUB_SHA" \
            PROD_POSTGRES_PASSWORD="$PROD_POSTGRES_PASSWORD" \
            PROD_JWT_SECRET="$PROD_JWT_SECRET" \
            PROD_ENCRYPTION_KEY="$PROD_ENCRYPTION_KEY" \
            PROD_GOOGLE_CLIENT_ID="$PROD_GOOGLE_CLIENT_ID" \
            PROD_GOOGLE_CLIENT_SECRET="$PROD_GOOGLE_CLIENT_SECRET" \
            PROD_DOMAIN="$PROD_DOMAIN" \
            bash /tmp/deploy.sh "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"

          rm ~/.ssh/deploy_key

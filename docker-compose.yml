version: '3.8'

services:
  # PostgreSQL Database (shared by both Real and Demo)
  postgres:
    image: postgres:16-alpine
    container_name: crypto-arbitrage-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crypto_arbitrage}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - arbitrage-network

  # Backend API - Real Mode (Port 8080)
  backend-real:
    build:
      context: ./src/CryptoArbitrage.API
      dockerfile: Dockerfile
    container_name: crypto-arbitrage-api-real
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=ProductionReal
      - ASPNETCORE_URLS=http://+:8080
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - arbitrage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Backend API - Demo Mode (Port 8081)
  backend-demo:
    build:
      context: ./src/CryptoArbitrage.API
      dockerfile: Dockerfile
    container_name: crypto-arbitrage-api-demo
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=ProductionDemo
      - ASPNETCORE_URLS=http://+:8080
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - arbitrage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend - Single instance with mode selector
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
        VITE_API_BASE_URL_DEMO: http://localhost:8081/api
        VITE_API_BASE_URL_REAL: http://localhost:8080/api
    container_name: crypto-arbitrage-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend-real
      - backend-demo
    networks:
      - arbitrage-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  arbitrage-network:
    driver: bridge

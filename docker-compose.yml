version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: crypto-arbitrage-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crypto_arbitrage}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - arbitrage-network

  # Backend API
  backend:
    build:
      context: ./src/CryptoArbitrage.API
      dockerfile: Dockerfile
    container_name: crypto-arbitrage-api
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB:-crypto_arbitrage};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-postgres}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-CryptoArbitrage}
      - Jwt__Audience=${JWT_AUDIENCE:-CryptoArbitrageClient}
      - Authentication__Google__ClientId=${GOOGLE_CLIENT_ID}
      - Authentication__Google__ClientSecret=${GOOGLE_CLIENT_SECRET}
      - Encryption__Key=${ENCRYPTION_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - arbitrage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
    container_name: crypto-arbitrage-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    networks:
      - arbitrage-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  arbitrage-network:
    driver: bridge

# =============================================================================
# CryptoArbitrage Platform - Environment Configuration
# =============================================================================
# This file documents all environment variables used by the platform.
# Copy this file to .env and fill in your actual values.
#
# IMPORTANT: Both backend-live and backend-demo services use the SAME
# environment variables but connect to DIFFERENT databases.
# =============================================================================

# -----------------------------------------------------------------------------
# Database Configuration (PostgreSQL)
# -----------------------------------------------------------------------------
# The PostgreSQL container creates TWO databases automatically:
#   - crypto_arbitrage_live  (used by backend-live)
#   - crypto_arbitrage_demo  (used by backend-demo)
POSTGRES_DB=crypto_arbitrage
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your_secure_password_here
POSTGRES_PORT=5432

# -----------------------------------------------------------------------------
# JWT Configuration (Required for all modes)
# -----------------------------------------------------------------------------
# Secret key for JWT token signing (minimum 32 characters)
# SECURITY: Generate a strong random key for production!
# Example: openssl rand -base64 32
JWT_SECRET_KEY=your_256_bit_secret_key_minimum_32_characters_long_change_in_production

# JWT token issuer and audience (optional, defaults provided in appsettings.json)
JWT_ISSUER=CryptoArbitrage
JWT_AUDIENCE=CryptoArbitrageClient

# -----------------------------------------------------------------------------
# Google OAuth Configuration (Required for authentication)
# -----------------------------------------------------------------------------
# Get credentials from: https://console.cloud.google.com/apis/credentials
GOOGLE_CLIENT_ID=your_google_client_id_here
GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# -----------------------------------------------------------------------------
# Encryption Configuration (Required for API key storage)
# -----------------------------------------------------------------------------
# 32-character key for encrypting user API keys in the database
# SECURITY: Generate a strong random key for production!
# Example: openssl rand -hex 16
ENCRYPTION_KEY=your_32_character_encryption_key

# -----------------------------------------------------------------------------
# Docker Service Ports
# -----------------------------------------------------------------------------
# Backend API Ports:
#   - backend-live:  Maps host port 8080 to container port 8080
#   - backend-demo:  Maps host port 8081 to container port 8080
# Frontend Ports:
#   - frontend-live: Maps host port 80 to container port 80
#   - frontend-demo: Maps host port 81 to container port 80
#
# These are configured in docker-compose.yml and don't need to be changed here.

# -----------------------------------------------------------------------------
# GitHub Container Registry (Optional - for production deployment)
# -----------------------------------------------------------------------------
GITHUB_REPOSITORY=yourusername/crypto-arbitrage
IMAGE_TAG=latest

# -----------------------------------------------------------------------------
# How the Configuration Works
# -----------------------------------------------------------------------------
#
# Docker Compose runs 4 services:
#   1. postgres        - Shared PostgreSQL database (contains both live & demo DBs)
#   2. backend-live    - API in ProductionLive mode (port 8080)
#   3. backend-demo    - API in ProductionDemo mode (port 8081)
#   4. frontend-live   - UI for live mode (port 80, connects to 8080)
#   5. frontend-demo   - UI for demo mode (port 81, connects to 8081)
#
# Each backend service:
#   - Uses the same environment variables defined above
#   - Uses different ASPNETCORE_ENVIRONMENT (ProductionLive vs ProductionDemo)
#   - Connects to different database (crypto_arbitrage_live vs crypto_arbitrage_demo)
#   - Runs on different port (8080 vs 8081)
#
# The databases are automatically created by docker-init-db.sh when the
# postgres container first starts.
#
# -----------------------------------------------------------------------------
# Usage Examples
# -----------------------------------------------------------------------------
#
# 1. Start all services (both Live and Demo):
#    docker compose up -d
#
# 2. Start only Live mode:
#    docker compose up -d postgres backend-live frontend-live
#
# 3. Start only Demo mode:
#    docker compose up -d postgres backend-demo frontend-demo
#
# 4. View logs:
#    docker compose logs -f backend-live
#    docker compose logs -f backend-demo
#
# 5. Access the applications:
#    Live mode:  http://localhost (frontend) and http://localhost:8080/api (backend)
#    Demo mode:  http://localhost:81 (frontend) and http://localhost:8081/api (backend)
#
# -----------------------------------------------------------------------------
